[project]
name = "raihan0824-prometheus-mcp-server"
version = "1.2.4"
description = "MCP server for Prometheus integration"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [
    {name = "raihan0824", email = "mraihanafiandi@gmail.com"}
]
maintainers = [
    {name = "raihan0824", email = "mraihanafiandi@gmail.com"}
]
keywords = ["prometheus", "mcp", "monitoring", "metrics", "claude", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Monitoring",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "mcp[cli]",
    "prometheus-api-client",
    "python-dotenv",
    "pyproject-toml>=0.1.0",
    "requests",
    "structlog>=23.0.0",
    "fastmcp>=2.11.3",
]

[project.urls]
Homepage = "https://github.com/raihan0824/prometheus-mcp-server"
Repository = "https://github.com/raihan0824/prometheus-mcp-server"
Issues = "https://github.com/raihan0824/prometheus-mcp-server/issues"
Documentation = "https://github.com/raihan0824/prometheus-mcp-server/blob/main/README.md"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "docker>=7.0.0",
    "requests>=2.31.0",
]

[project.scripts]
prometheus-mcp-server = "prometheus_mcp_server.main:run_server"

[tool.setuptools]
packages = ["prometheus_mcp_server"]
package-dir = {"" = "src"}

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = "--cov=src --cov-report=term-missing"

[tool.coverage.run]
source = ["src/prometheus_mcp_server"]
omit = ["*/__pycache__/*", "*/tests/*", "*/.venv/*", "*/venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError"
]
